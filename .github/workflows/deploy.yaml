name: CD

on:
  push:
    branches:
      - 'backend-django'

jobs:
  test:
    runs-on: ubuntu-latest
    environment: main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test env file
        run: |
          cat <<EOF > backend/.env
          DJANGO_SECRET_KEY=TEST_KEY
          DEBUG=True
          DJANGO_LOGLEVEL=info
          DJANGO_ALLOWED_HOSTS=localhost,0.0.0.0
          DATABASE_NAME=test_db
          DATABASE_USERNAME=test_db_user
          DATABASE_PASSWORD=test_db_password
          DATABASE_HOST=database
          DATABASE_PORT=5432
          GIGACHAT_AUTH_KEY=${{ secrets.GIGACHAT_AUTH_KEY }}
          EOF

      - name: Local deploy for test
        run: |
          cd backend
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml up --build -d
          docker compose logs --tail=20
          
      - name: Wait for containers to be healthy
        run: |
          TIMEOUT=60
          INTERVAL=2
          ELAPSED=0
      
          echo "Waiting for all services to become healthy..."
          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(docker inspect --format '{{json .State.Health.Status}}' $(docker compose ps -q) | grep -v "healthy" || true)
            if [ -z "$STATUS" ]; then
              echo "All services are healthy!"
              exit 0
            fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
      
          echo "Some services did not become healthy in time:"
          docker compose ps
          docker compose logs
          exit 1    

      - name: Tear down containers
        if: always()
        run: |
          cd backend
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml down -v

  build:
    runs-on: ubuntu-latest
    environment: main
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Env file
      run: |
        cat <<EOF > backend/.env
        DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG=False
        DJANGO_LOGLEVEL=info
        DJANGO_ALLOWED_HOSTS=localhost,0.0.0.0,193.135.137.154
        DATABASE_NAME=${{ secrets.DATABASE_NAME }}
        DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        DATABASE_HOST=database
        DATABASE_PORT=5432
        GIGACHAT_AUTH_KEY=${{ secrets.GIGACHAT_AUTH_KEY }}
        SERVER_HOST=${{ secrets.SERVER_HOST }}
        EOF

    - name: Log in to Docker hub
      run: |
        echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and Push Docker image
      run: |
        cd backend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/taskbench-backend:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/taskbench-backend:latest

    - name: Copy docker-compose.yaml to server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: backend/docker-compose.yaml, backend/.env backend/nginx.conf
        target: /home/${{ secrets.SERVER_USER }}/app/

    - name: Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          cd /home/${{ secrets.SERVER_USER }}/app/backend
          docker compose pull
          docker compose down
          docker compose up -d
          docker compose logs --tail=20

    - name: Check if app is responding on port
      run: |
        echo "Waiting for server to be reachable..."
        for i in {1..10}; do
          nc -zv ${{ secrets.SERVER_HOST }} 443 && echo "OK: Port is open!" && exit 0
          echo "Attempt $i: Server not ready yet..."
          sleep 10
        done
        echo "ERROR: Server is not responding on port 443"
        exit 1
