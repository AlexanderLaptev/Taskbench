openapi: 3.0.0
info:
  title: Taskbench API
  description: API for managing tasks with deadlines, priorities, and categories
  version: 1.0.0

servers:
  - url: https://api.taskbench.ru/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  /ai/suggestions:
    post:
      summary: Get AI suggestions for task DPC
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Task description text
                timestamp:
                  type: integer
                  format: int64
                  description: Unix timestamp
                dpc:
                  $ref: '#/components/schemas/DPC'
      responses:
        '200':
          description: AI suggestions received
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggested_dpc:
                    $ref: '#/components/schemas/DPC'
                  suggestions:
                    type: array
                    items:
                      type: string

  /tasks:
    post:
      summary: Submit a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    get:
      summary: Get list of tasks
      parameters:
        - in: query
          name: category_id
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [priority, deadline]
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by exact date (cannot be used with after/before)
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: Filter tasks with deadline after this datetime (UTC)
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: Filter tasks with deadline before this datetime (UTC)
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: List of tasks retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    

  /tasks/{task_id}:
    delete:
      summary: Remove a task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task removed successfully

    patch:
      summary: Edit a task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                dpc:
                  $ref: '#/components/schemas/DPC'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /subtasks:
    post:
      summary: Add a subtask
      parameters:
        - in: query
          name: task_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                is_done:
                  type: boolean
      responses:
        '201':
          description: Subtask created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtask'
  
  /subtasks/{subtask_id}:
    patch:
      summary: Edit or toggle a subtask
      parameters:
        - in: path
          name: subtask_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                is_done:
                  type: boolean
      responses:
        '200':
          description: Subtask updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtask'

    delete:
      summary: Remove a subtask
      parameters:
        - in: path
          name: subtask_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Subtask removed successfully

  /user/register:
    post:
      summary: Create user and get json web tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: mySecret12
      responses:
        '201':
          description: Successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 42
                  access:
                    type: string
                    description: JWT access token
                    example: eyJ0eXAiOiJKV1QiLCJhbGci...
                  refresh:
                    type: string
                    description: JWT refresh token
                    example: eyJ0eXAiOiJKV1QiLCJhbGci...
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists
      security: []
       
  /user/login/:
    post:
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: mySecret123
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 42
                  access:
                    type: string
                    description: JWT access token
                    example: eyJ0eXAiOiJKV1QiLCJhbGci...
                  refresh:
                    type: string
                    description: JWT refresh token
                    example: eyJ0eXAiOiJKV1QiLCJhbGci...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
      security: []
      
  /user/password:
    patch:
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
      responses:
        '204':
          description: Password changed successfully

  /user/delete:
    delete:
      summary: Delete an existing user
      description: Delete the current authenticated user.
      responses:
        '200':
          description: Successfully deleted user
        '401':
          description: Unauthorized â€” invalid or missing token
        '404':
          description: User not found
      security:
        - BearerAuth: []

  /token/refresh/:
    post:
      summary: Refresh access token
      description: Obtain a new access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
                  example: eyJ0eXAiOiJKV1QiLCJhbGci...
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGci...
        '401':
          description: Invalid or expired refresh token

  /statistics:
    get:
      summary: Get user statistics
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  done_today:
                    type: integer
                  max_done:
                    type: integer
                  weekly:
                    type: array
                    items:
                      type: number
                      format: float
                    maxItems: 7
                    minItems: 7
                    
  /categories:
    get:
      summary: Get user's categories
      responses:
        '200':
          description: List of user's categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
                  
    post:
      summary: Create new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '409':
          description: Category already exists

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    DPC:
      type: object
      properties:
        deadline:
          type: string
          format: date-time
        priority:
          type: integer
          minimum: 0
        category_id:
          type: integer
        category_name:
          type: string

    TaskInput:
      type: object
      properties:
        content:
          type: string
        dpc:
          $ref: '#/components/schemas/DPC'
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/SubtaskInput'

    SubtaskInput:
      type: object
      properties:
        content:
          type: string

    Task:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        is_done:
          type: boolean
        dpc:
          $ref: '#/components/schemas/DPC'
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Subtask'

    Subtask:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        is_done:
          type: boolean
          
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 50
      required:
        - name
